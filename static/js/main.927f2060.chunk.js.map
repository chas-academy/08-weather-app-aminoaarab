{"version":3,"sources":["components/Geolocation.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["darkKey","darkskyBaseUrl","Geolocation","state","windGust","humidity","timezone","temperature","sunrise","sunset","weeklyWeather","hourlyWeather","isCelsius","toggleTemp","_this","setState","navigator","geolocation","getCurrentPosition","position","axios","get","concat","coords","latitude","longitude","then","res","sunriseTime","data","daily","sunsetTime","currently","slice","hourly","filter","_","i","console","log","this","_this2","_this$state","weekWeather","map","week","index","react_default","a","createElement","key","className","Date","time","toLocaleDateString","summary","temperatureMax","toFixed","temperatureMin","hourWeather","hour","toLocaleString","onClick","type","toLocaleTimeString","Component","Navbar","App","components_Navbar","components_Geolocation","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.927f2060.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport '../App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst darkKey = '0d7a00fe566543ff233dab5e197a49ce';\r\nconst darkskyBaseUrl = 'https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/';\r\n\r\nclass Geolocation extends Component {\r\n\r\n    state = {\r\n        windGust: [],\r\n        humidity: [],\r\n        timezone: [],\r\n        temperature: [],\r\n        sunrise: [],\r\n        sunset: [],\r\n        weeklyWeather: [],\r\n        hourlyWeather: [],\r\n        isCelsius: false\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.toggleTemp()\r\n     }\r\n\r\n    toggleTemp = () => {\r\n\r\n        this.setState({\r\n            isCelsius: !this.state.isCelsius\r\n        })\r\n\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                axios.get(`${darkskyBaseUrl}/${darkKey}/${position.coords.latitude},${position.coords.longitude}`)\r\n                    .then(res => {\r\n                        this.setState({\r\n                            sunriseTime: res.data.daily.data[0].sunriseTime,\r\n                            sunsetTime: res.data.daily.data[0].sunsetTime,\r\n                            temperature: res.data.currently.temperature,\r\n                            windGust: res.data.currently.windGust,\r\n                            humidity: res.data.currently.humidity,\r\n                            timezone: res.data.timezone,\r\n                            weeklyWeather: res.data.daily.data.slice(0, 5),\r\n                            hourlyWeather: res.data.hourly.data.filter((_, i) => i % 3 === 0).slice(0, 6)\r\n                        })\r\n                        console.log(res);\r\n                    })\r\n            })\r\n        } else {\r\n            console.log(\"something went wrong\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { windGust, humidity, timezone, temperature, sunriseTime, sunsetTime, weeklyWeather, hourlyWeather } = this.state;\r\n\r\n        const weekWeather = weeklyWeather.map((week, index) =>\r\n            <ul key={index} className=\"weekSum\">\r\n                <li>{new Date(week.time * 1000).toLocaleDateString('it-IT')}</li>\r\n                <li>{week.summary}</li>\r\n                <li>Max: {this.state.isCelsius ? ((week.temperatureMax - 32) * 5 / 9).toFixed(0) + ' °C' : week.temperatureMax + ' °F'}</li>\r\n                <li>Min: {this.state.isCelsius ? ((week.temperatureMin - 32) * 5 / 9).toFixed(0) + ' °C' : week.temperatureMin + ' °F'}</li>\r\n            </ul>\r\n        )\r\n        const hourWeather = hourlyWeather.map((hour, index) =>\r\n            <ul key={index} className=\"hourlyWeather\" >\r\n                <li>Date: {new Date(hour.time * 1000).toLocaleString('it-IT')}</li>\r\n                <li>Temperature: {this.state.isCelsius ? ((hour.temperature - 32) * 5 / 9).toFixed(0) + ' °C' : hour.temperature + ' °F'}</li>\r\n            </ul>\r\n        )\r\n\r\n        return (\r\n            <section className=\"GeolocationHead\">\r\n                <h3>Hello, the current weather at your location.</h3>\r\n                <div className=\"infoGeoLoc\">\r\n                    <button onClick={this.toggleTemp} type=\"button\" className=\"btn btn-primary\">°C/°F</button>\r\n                    <h5>Location: {timezone}</h5>\r\n                    <ul>\r\n                        <li>Temperature: {this.state.isCelsius ? ((temperature - 32) * 5 / 9).toFixed(0) + ' °C' : temperature + ' °F'}</li>\r\n                        <li>Wind gust: {windGust}Km/h</li>\r\n                        <li>Humidity: {humidity}%</li>\r\n                        <li>Sunrise: {new Date(sunriseTime * 1000).toLocaleTimeString('it-IT')}</li>\r\n                        <li>Sunset: {new Date(sunsetTime * 1000).toLocaleTimeString('it-IT')}</li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <div>\r\n                    <h3>Every 3rd hour</h3>\r\n                    <ul>\r\n                        <li className=\"hourCards\">{hourWeather}</li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <div>\r\n                    <h3>Weekly Summary</h3>\r\n                    <ul>\r\n                        <li className=\"weekCards\" >{weekWeather}</li>\r\n                    </ul>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Geolocation;","import React, { Component } from 'react';\r\n\r\nclass Navbar extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"Navbar\">\r\n                <h2>Weather App</h2>             \r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React from 'react';\n\n\nimport './App.css';\n\n\nimport Geolocation from './components/Geolocation';\nimport Navbar from './components/Navbar';\n\nfunction App(){\n \n\n  \n  return (\n    <section>\n      <div>\n        <Navbar />\n      </div>\n      <div>\n        <Geolocation />\n      </div>\n    </section>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}